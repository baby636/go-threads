// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: api/pb/threaddb.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ListenRequest_Filter_Action int32

const (
	ListenRequest_Filter_ALL    ListenRequest_Filter_Action = 0
	ListenRequest_Filter_CREATE ListenRequest_Filter_Action = 1
	ListenRequest_Filter_SAVE   ListenRequest_Filter_Action = 2
	ListenRequest_Filter_DELETE ListenRequest_Filter_Action = 3
)

// Enum value maps for ListenRequest_Filter_Action.
var (
	ListenRequest_Filter_Action_name = map[int32]string{
		0: "ALL",
		1: "CREATE",
		2: "SAVE",
		3: "DELETE",
	}
	ListenRequest_Filter_Action_value = map[string]int32{
		"ALL":    0,
		"CREATE": 1,
		"SAVE":   2,
		"DELETE": 3,
	}
)

func (x ListenRequest_Filter_Action) Enum() *ListenRequest_Filter_Action {
	p := new(ListenRequest_Filter_Action)
	*p = x
	return p
}

func (x ListenRequest_Filter_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenRequest_Filter_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pb_threaddb_proto_enumTypes[0].Descriptor()
}

func (ListenRequest_Filter_Action) Type() protoreflect.EnumType {
	return &file_api_pb_threaddb_proto_enumTypes[0]
}

func (x ListenRequest_Filter_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenRequest_Filter_Action.Descriptor instead.
func (ListenRequest_Filter_Action) EnumDescriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{44, 0, 0}
}

type ListenReply_Action int32

const (
	ListenReply_CREATE ListenReply_Action = 0
	ListenReply_SAVE   ListenReply_Action = 1
	ListenReply_DELETE ListenReply_Action = 2
)

// Enum value maps for ListenReply_Action.
var (
	ListenReply_Action_name = map[int32]string{
		0: "CREATE",
		1: "SAVE",
		2: "DELETE",
	}
	ListenReply_Action_value = map[string]int32{
		"CREATE": 0,
		"SAVE":   1,
		"DELETE": 2,
	}
)

func (x ListenReply_Action) Enum() *ListenReply_Action {
	p := new(ListenReply_Action)
	*p = x
	return p
}

func (x ListenReply_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenReply_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pb_threaddb_proto_enumTypes[1].Descriptor()
}

func (ListenReply_Action) Type() protoreflect.EnumType {
	return &file_api_pb_threaddb_proto_enumTypes[1]
}

func (x ListenReply_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenReply_Action.Descriptor instead.
func (ListenReply_Action) EnumDescriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{45, 0}
}

// @todo: Clean up tag numbers with next major release
type NewDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID        []byte              `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Key         []byte              `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	LogKey      []byte              `protobuf:"bytes,7,opt,name=logKey,proto3" json:"logKey,omitempty"`
	Name        string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Collections []*CollectionConfig `protobuf:"bytes,2,rep,name=collections,proto3" json:"collections,omitempty"`
	// Deprecated: Do not use.
	Block bool `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *NewDBRequest) Reset() {
	*x = NewDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDBRequest) ProtoMessage() {}

func (x *NewDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDBRequest.ProtoReflect.Descriptor instead.
func (*NewDBRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{0}
}

func (x *NewDBRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *NewDBRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *NewDBRequest) GetLogKey() []byte {
	if x != nil {
		return x.LogKey
	}
	return nil
}

func (x *NewDBRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewDBRequest) GetCollections() []*CollectionConfig {
	if x != nil {
		return x.Collections
	}
	return nil
}

// Deprecated: Do not use.
func (x *NewDBRequest) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

// @todo: Clean up tag numbers with next major release
type NewDBFromAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        []byte              `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Key         []byte              `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	LogKey      []byte              `protobuf:"bytes,7,opt,name=logKey,proto3" json:"logKey,omitempty"`
	Name        string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Collections []*CollectionConfig `protobuf:"bytes,3,rep,name=collections,proto3" json:"collections,omitempty"`
	Block       bool                `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
	// Deprecated: Do not use.
	ThreadKey []byte `protobuf:"bytes,6,opt,name=threadKey,proto3" json:"threadKey,omitempty"`
}

func (x *NewDBFromAddrRequest) Reset() {
	*x = NewDBFromAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDBFromAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDBFromAddrRequest) ProtoMessage() {}

func (x *NewDBFromAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDBFromAddrRequest.ProtoReflect.Descriptor instead.
func (*NewDBFromAddrRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{1}
}

func (x *NewDBFromAddrRequest) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *NewDBFromAddrRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *NewDBFromAddrRequest) GetLogKey() []byte {
	if x != nil {
		return x.LogKey
	}
	return nil
}

func (x *NewDBFromAddrRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewDBFromAddrRequest) GetCollections() []*CollectionConfig {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *NewDBFromAddrRequest) GetBlock() bool {
	if x != nil {
		return x.Block
	}
	return false
}

// Deprecated: Do not use.
func (x *NewDBFromAddrRequest) GetThreadKey() []byte {
	if x != nil {
		return x.ThreadKey
	}
	return nil
}

type CollectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema         []byte   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Indexes        []*Index `protobuf:"bytes,3,rep,name=indexes,proto3" json:"indexes,omitempty"`
	WriteValidator string   `protobuf:"bytes,4,opt,name=writeValidator,proto3" json:"writeValidator,omitempty"`
	ReadFilter     string   `protobuf:"bytes,5,opt,name=readFilter,proto3" json:"readFilter,omitempty"`
}

func (x *CollectionConfig) Reset() {
	*x = CollectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionConfig) ProtoMessage() {}

func (x *CollectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionConfig.ProtoReflect.Descriptor instead.
func (*CollectionConfig) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{2}
}

func (x *CollectionConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectionConfig) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CollectionConfig) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *CollectionConfig) GetWriteValidator() string {
	if x != nil {
		return x.WriteValidator
	}
	return ""
}

func (x *CollectionConfig) GetReadFilter() string {
	if x != nil {
		return x.ReadFilter
	}
	return ""
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Unique bool   `protobuf:"varint,2,opt,name=unique,proto3" json:"unique,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{3}
}

func (x *Index) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Index) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

type NewDBReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewDBReply) Reset() {
	*x = NewDBReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewDBReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewDBReply) ProtoMessage() {}

func (x *NewDBReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewDBReply.ProtoReflect.Descriptor instead.
func (*NewDBReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{4}
}

type ListDBsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDBsRequest) Reset() {
	*x = ListDBsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDBsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDBsRequest) ProtoMessage() {}

func (x *ListDBsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDBsRequest.ProtoReflect.Descriptor instead.
func (*ListDBsRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{5}
}

type ListDBsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbs []*ListDBsReply_DB `protobuf:"bytes,1,rep,name=dbs,proto3" json:"dbs,omitempty"`
}

func (x *ListDBsReply) Reset() {
	*x = ListDBsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDBsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDBsReply) ProtoMessage() {}

func (x *ListDBsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDBsReply.ProtoReflect.Descriptor instead.
func (*ListDBsReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{6}
}

func (x *ListDBsReply) GetDbs() []*ListDBsReply_DB {
	if x != nil {
		return x.Dbs
	}
	return nil
}

type GetDBInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
}

func (x *GetDBInfoRequest) Reset() {
	*x = GetDBInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDBInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBInfoRequest) ProtoMessage() {}

func (x *GetDBInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDBInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDBInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{7}
}

func (x *GetDBInfoRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

type GetDBInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addrs [][]byte `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Key   []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name  string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetDBInfoReply) Reset() {
	*x = GetDBInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDBInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDBInfoReply) ProtoMessage() {}

func (x *GetDBInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDBInfoReply.ProtoReflect.Descriptor instead.
func (*GetDBInfoReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{8}
}

func (x *GetDBInfoReply) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *GetDBInfoReply) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetDBInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteDBRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
}

func (x *DeleteDBRequest) Reset() {
	*x = DeleteDBRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDBRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDBRequest) ProtoMessage() {}

func (x *DeleteDBRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDBRequest.ProtoReflect.Descriptor instead.
func (*DeleteDBRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDBRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

type DeleteDBReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDBReply) Reset() {
	*x = DeleteDBReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDBReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDBReply) ProtoMessage() {}

func (x *DeleteDBReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDBReply.ProtoReflect.Descriptor instead.
func (*DeleteDBReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{10}
}

type NewCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID   []byte            `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Config *CollectionConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *NewCollectionRequest) Reset() {
	*x = NewCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCollectionRequest) ProtoMessage() {}

func (x *NewCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCollectionRequest.ProtoReflect.Descriptor instead.
func (*NewCollectionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{11}
}

func (x *NewCollectionRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *NewCollectionRequest) GetConfig() *CollectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type NewCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewCollectionReply) Reset() {
	*x = NewCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCollectionReply) ProtoMessage() {}

func (x *NewCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCollectionReply.ProtoReflect.Descriptor instead.
func (*NewCollectionReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{12}
}

type UpdateCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID   []byte            `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Config *CollectionConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *UpdateCollectionRequest) Reset() {
	*x = UpdateCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectionRequest) ProtoMessage() {}

func (x *UpdateCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCollectionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCollectionRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *UpdateCollectionRequest) GetConfig() *CollectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCollectionReply) Reset() {
	*x = UpdateCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCollectionReply) ProtoMessage() {}

func (x *UpdateCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCollectionReply.ProtoReflect.Descriptor instead.
func (*UpdateCollectionReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{14}
}

type DeleteCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteCollectionRequest) Reset() {
	*x = DeleteCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionRequest) ProtoMessage() {}

func (x *DeleteCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCollectionRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *DeleteCollectionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteCollectionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCollectionReply) Reset() {
	*x = DeleteCollectionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCollectionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCollectionReply) ProtoMessage() {}

func (x *DeleteCollectionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCollectionReply.ProtoReflect.Descriptor instead.
func (*DeleteCollectionReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{16}
}

type GetCollectionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCollectionInfoRequest) Reset() {
	*x = GetCollectionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionInfoRequest) ProtoMessage() {}

func (x *GetCollectionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{17}
}

func (x *GetCollectionInfoRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *GetCollectionInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCollectionInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Schema         []byte   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Indexes        []*Index `protobuf:"bytes,3,rep,name=indexes,proto3" json:"indexes,omitempty"`
	WriteValidator string   `protobuf:"bytes,4,opt,name=writeValidator,proto3" json:"writeValidator,omitempty"`
	ReadFilter     string   `protobuf:"bytes,5,opt,name=readFilter,proto3" json:"readFilter,omitempty"`
}

func (x *GetCollectionInfoReply) Reset() {
	*x = GetCollectionInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionInfoReply) ProtoMessage() {}

func (x *GetCollectionInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionInfoReply.ProtoReflect.Descriptor instead.
func (*GetCollectionInfoReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{18}
}

func (x *GetCollectionInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCollectionInfoReply) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *GetCollectionInfoReply) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *GetCollectionInfoReply) GetWriteValidator() string {
	if x != nil {
		return x.WriteValidator
	}
	return ""
}

func (x *GetCollectionInfoReply) GetReadFilter() string {
	if x != nil {
		return x.ReadFilter
	}
	return ""
}

type GetCollectionIndexesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCollectionIndexesRequest) Reset() {
	*x = GetCollectionIndexesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionIndexesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionIndexesRequest) ProtoMessage() {}

func (x *GetCollectionIndexesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionIndexesRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionIndexesRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{19}
}

func (x *GetCollectionIndexesRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *GetCollectionIndexesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetCollectionIndexesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*Index `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *GetCollectionIndexesReply) Reset() {
	*x = GetCollectionIndexesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionIndexesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionIndexesReply) ProtoMessage() {}

func (x *GetCollectionIndexesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionIndexesReply.ProtoReflect.Descriptor instead.
func (*GetCollectionIndexesReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{20}
}

func (x *GetCollectionIndexesReply) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type ListCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
}

func (x *ListCollectionsRequest) Reset() {
	*x = ListCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsRequest) ProtoMessage() {}

func (x *ListCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsRequest.ProtoReflect.Descriptor instead.
func (*ListCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{21}
}

func (x *ListCollectionsRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

type ListCollectionsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*GetCollectionInfoReply `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *ListCollectionsReply) Reset() {
	*x = ListCollectionsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCollectionsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectionsReply) ProtoMessage() {}

func (x *ListCollectionsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectionsReply.ProtoReflect.Descriptor instead.
func (*ListCollectionsReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{22}
}

func (x *ListCollectionsReply) GetCollections() []*GetCollectionInfoReply {
	if x != nil {
		return x.Collections
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte   `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	Instances      [][]byte `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{23}
}

func (x *CreateRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *CreateRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CreateRequest) GetInstances() [][]byte {
	if x != nil {
		return x.Instances
	}
	return nil
}

type CreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIDs      []string `protobuf:"bytes,1,rep,name=instanceIDs,proto3" json:"instanceIDs,omitempty"`
	TransactionError string   `protobuf:"bytes,2,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *CreateReply) Reset() {
	*x = CreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReply) ProtoMessage() {}

func (x *CreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReply.ProtoReflect.Descriptor instead.
func (*CreateReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{24}
}

func (x *CreateReply) GetInstanceIDs() []string {
	if x != nil {
		return x.InstanceIDs
	}
	return nil
}

func (x *CreateReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type VerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte   `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	Instances      [][]byte `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *VerifyRequest) Reset() {
	*x = VerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequest) ProtoMessage() {}

func (x *VerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{25}
}

func (x *VerifyRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *VerifyRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *VerifyRequest) GetInstances() [][]byte {
	if x != nil {
		return x.Instances
	}
	return nil
}

type VerifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionError string `protobuf:"bytes,1,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *VerifyReply) Reset() {
	*x = VerifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyReply) ProtoMessage() {}

func (x *VerifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyReply.ProtoReflect.Descriptor instead.
func (*VerifyReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{26}
}

func (x *VerifyReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type SaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte   `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	Instances      [][]byte `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *SaveRequest) Reset() {
	*x = SaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRequest) ProtoMessage() {}

func (x *SaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRequest.ProtoReflect.Descriptor instead.
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{27}
}

func (x *SaveRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *SaveRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *SaveRequest) GetInstances() [][]byte {
	if x != nil {
		return x.Instances
	}
	return nil
}

type SaveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionError string `protobuf:"bytes,1,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *SaveReply) Reset() {
	*x = SaveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveReply) ProtoMessage() {}

func (x *SaveReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveReply.ProtoReflect.Descriptor instead.
func (*SaveReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{28}
}

func (x *SaveReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte   `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	InstanceIDs    []string `protobuf:"bytes,3,rep,name=instanceIDs,proto3" json:"instanceIDs,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *DeleteRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *DeleteRequest) GetInstanceIDs() []string {
	if x != nil {
		return x.InstanceIDs
	}
	return nil
}

type DeleteReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionError string `protobuf:"bytes,1,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *DeleteReply) Reset() {
	*x = DeleteReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReply) ProtoMessage() {}

func (x *DeleteReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReply.ProtoReflect.Descriptor instead.
func (*DeleteReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type HasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte   `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string   `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	InstanceIDs    []string `protobuf:"bytes,3,rep,name=instanceIDs,proto3" json:"instanceIDs,omitempty"`
}

func (x *HasRequest) Reset() {
	*x = HasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasRequest) ProtoMessage() {}

func (x *HasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasRequest.ProtoReflect.Descriptor instead.
func (*HasRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{31}
}

func (x *HasRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *HasRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *HasRequest) GetInstanceIDs() []string {
	if x != nil {
		return x.InstanceIDs
	}
	return nil
}

type HasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists           bool   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	TransactionError string `protobuf:"bytes,2,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *HasReply) Reset() {
	*x = HasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasReply) ProtoMessage() {}

func (x *HasReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasReply.ProtoReflect.Descriptor instead.
func (*HasReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{32}
}

func (x *HasReply) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *HasReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	QueryJSON      []byte `protobuf:"bytes,3,opt,name=queryJSON,proto3" json:"queryJSON,omitempty"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{33}
}

func (x *FindRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *FindRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *FindRequest) GetQueryJSON() []byte {
	if x != nil {
		return x.QueryJSON
	}
	return nil
}

type FindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances        [][]byte `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	TransactionError string   `protobuf:"bytes,2,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *FindReply) Reset() {
	*x = FindReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindReply) ProtoMessage() {}

func (x *FindReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindReply.ProtoReflect.Descriptor instead.
func (*FindReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{34}
}

func (x *FindReply) GetInstances() [][]byte {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *FindReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type FindByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	InstanceID     string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
}

func (x *FindByIDRequest) Reset() {
	*x = FindByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIDRequest) ProtoMessage() {}

func (x *FindByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIDRequest.ProtoReflect.Descriptor instead.
func (*FindByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{35}
}

func (x *FindByIDRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *FindByIDRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *FindByIDRequest) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

type FindByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance         []byte `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	TransactionError string `protobuf:"bytes,2,opt,name=transactionError,proto3" json:"transactionError,omitempty"`
}

func (x *FindByIDReply) Reset() {
	*x = FindByIDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIDReply) ProtoMessage() {}

func (x *FindByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIDReply.ProtoReflect.Descriptor instead.
func (*FindByIDReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{36}
}

func (x *FindByIDReply) GetInstance() []byte {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *FindByIDReply) GetTransactionError() string {
	if x != nil {
		return x.TransactionError
	}
	return ""
}

type DiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiscardRequest) Reset() {
	*x = DiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardRequest) ProtoMessage() {}

func (x *DiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardRequest.ProtoReflect.Descriptor instead.
func (*DiscardRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{37}
}

type DiscardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiscardReply) Reset() {
	*x = DiscardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardReply) ProtoMessage() {}

func (x *DiscardReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardReply.ProtoReflect.Descriptor instead.
func (*DiscardReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{38}
}

type StartTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID           []byte `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	CollectionName string `protobuf:"bytes,2,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
}

func (x *StartTransactionRequest) Reset() {
	*x = StartTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransactionRequest) ProtoMessage() {}

func (x *StartTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransactionRequest.ProtoReflect.Descriptor instead.
func (*StartTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{39}
}

func (x *StartTransactionRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *StartTransactionRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

type ReadTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//	*ReadTransactionRequest_StartTransactionRequest
	//	*ReadTransactionRequest_HasRequest
	//	*ReadTransactionRequest_FindRequest
	//	*ReadTransactionRequest_FindByIDRequest
	Option isReadTransactionRequest_Option `protobuf_oneof:"option"`
}

func (x *ReadTransactionRequest) Reset() {
	*x = ReadTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTransactionRequest) ProtoMessage() {}

func (x *ReadTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReadTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{40}
}

func (m *ReadTransactionRequest) GetOption() isReadTransactionRequest_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *ReadTransactionRequest) GetStartTransactionRequest() *StartTransactionRequest {
	if x, ok := x.GetOption().(*ReadTransactionRequest_StartTransactionRequest); ok {
		return x.StartTransactionRequest
	}
	return nil
}

func (x *ReadTransactionRequest) GetHasRequest() *HasRequest {
	if x, ok := x.GetOption().(*ReadTransactionRequest_HasRequest); ok {
		return x.HasRequest
	}
	return nil
}

func (x *ReadTransactionRequest) GetFindRequest() *FindRequest {
	if x, ok := x.GetOption().(*ReadTransactionRequest_FindRequest); ok {
		return x.FindRequest
	}
	return nil
}

func (x *ReadTransactionRequest) GetFindByIDRequest() *FindByIDRequest {
	if x, ok := x.GetOption().(*ReadTransactionRequest_FindByIDRequest); ok {
		return x.FindByIDRequest
	}
	return nil
}

type isReadTransactionRequest_Option interface {
	isReadTransactionRequest_Option()
}

type ReadTransactionRequest_StartTransactionRequest struct {
	StartTransactionRequest *StartTransactionRequest `protobuf:"bytes,1,opt,name=startTransactionRequest,proto3,oneof"`
}

type ReadTransactionRequest_HasRequest struct {
	HasRequest *HasRequest `protobuf:"bytes,2,opt,name=hasRequest,proto3,oneof"`
}

type ReadTransactionRequest_FindRequest struct {
	FindRequest *FindRequest `protobuf:"bytes,3,opt,name=findRequest,proto3,oneof"`
}

type ReadTransactionRequest_FindByIDRequest struct {
	FindByIDRequest *FindByIDRequest `protobuf:"bytes,4,opt,name=findByIDRequest,proto3,oneof"`
}

func (*ReadTransactionRequest_StartTransactionRequest) isReadTransactionRequest_Option() {}

func (*ReadTransactionRequest_HasRequest) isReadTransactionRequest_Option() {}

func (*ReadTransactionRequest_FindRequest) isReadTransactionRequest_Option() {}

func (*ReadTransactionRequest_FindByIDRequest) isReadTransactionRequest_Option() {}

type ReadTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//	*ReadTransactionReply_HasReply
	//	*ReadTransactionReply_FindReply
	//	*ReadTransactionReply_FindByIDReply
	Option isReadTransactionReply_Option `protobuf_oneof:"option"`
}

func (x *ReadTransactionReply) Reset() {
	*x = ReadTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTransactionReply) ProtoMessage() {}

func (x *ReadTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTransactionReply.ProtoReflect.Descriptor instead.
func (*ReadTransactionReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{41}
}

func (m *ReadTransactionReply) GetOption() isReadTransactionReply_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *ReadTransactionReply) GetHasReply() *HasReply {
	if x, ok := x.GetOption().(*ReadTransactionReply_HasReply); ok {
		return x.HasReply
	}
	return nil
}

func (x *ReadTransactionReply) GetFindReply() *FindReply {
	if x, ok := x.GetOption().(*ReadTransactionReply_FindReply); ok {
		return x.FindReply
	}
	return nil
}

func (x *ReadTransactionReply) GetFindByIDReply() *FindByIDReply {
	if x, ok := x.GetOption().(*ReadTransactionReply_FindByIDReply); ok {
		return x.FindByIDReply
	}
	return nil
}

type isReadTransactionReply_Option interface {
	isReadTransactionReply_Option()
}

type ReadTransactionReply_HasReply struct {
	HasReply *HasReply `protobuf:"bytes,1,opt,name=hasReply,proto3,oneof"`
}

type ReadTransactionReply_FindReply struct {
	FindReply *FindReply `protobuf:"bytes,2,opt,name=findReply,proto3,oneof"`
}

type ReadTransactionReply_FindByIDReply struct {
	FindByIDReply *FindByIDReply `protobuf:"bytes,3,opt,name=findByIDReply,proto3,oneof"`
}

func (*ReadTransactionReply_HasReply) isReadTransactionReply_Option() {}

func (*ReadTransactionReply_FindReply) isReadTransactionReply_Option() {}

func (*ReadTransactionReply_FindByIDReply) isReadTransactionReply_Option() {}

type WriteTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//	*WriteTransactionRequest_StartTransactionRequest
	//	*WriteTransactionRequest_CreateRequest
	//	*WriteTransactionRequest_VerifyRequest
	//	*WriteTransactionRequest_SaveRequest
	//	*WriteTransactionRequest_DeleteRequest
	//	*WriteTransactionRequest_HasRequest
	//	*WriteTransactionRequest_FindRequest
	//	*WriteTransactionRequest_FindByIDRequest
	//	*WriteTransactionRequest_DiscardRequest
	Option isWriteTransactionRequest_Option `protobuf_oneof:"option"`
}

func (x *WriteTransactionRequest) Reset() {
	*x = WriteTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTransactionRequest) ProtoMessage() {}

func (x *WriteTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTransactionRequest.ProtoReflect.Descriptor instead.
func (*WriteTransactionRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{42}
}

func (m *WriteTransactionRequest) GetOption() isWriteTransactionRequest_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *WriteTransactionRequest) GetStartTransactionRequest() *StartTransactionRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_StartTransactionRequest); ok {
		return x.StartTransactionRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetCreateRequest() *CreateRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_CreateRequest); ok {
		return x.CreateRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetVerifyRequest() *VerifyRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_VerifyRequest); ok {
		return x.VerifyRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetSaveRequest() *SaveRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_SaveRequest); ok {
		return x.SaveRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetDeleteRequest() *DeleteRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_DeleteRequest); ok {
		return x.DeleteRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetHasRequest() *HasRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_HasRequest); ok {
		return x.HasRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetFindRequest() *FindRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_FindRequest); ok {
		return x.FindRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetFindByIDRequest() *FindByIDRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_FindByIDRequest); ok {
		return x.FindByIDRequest
	}
	return nil
}

func (x *WriteTransactionRequest) GetDiscardRequest() *DiscardRequest {
	if x, ok := x.GetOption().(*WriteTransactionRequest_DiscardRequest); ok {
		return x.DiscardRequest
	}
	return nil
}

type isWriteTransactionRequest_Option interface {
	isWriteTransactionRequest_Option()
}

type WriteTransactionRequest_StartTransactionRequest struct {
	StartTransactionRequest *StartTransactionRequest `protobuf:"bytes,1,opt,name=startTransactionRequest,proto3,oneof"`
}

type WriteTransactionRequest_CreateRequest struct {
	CreateRequest *CreateRequest `protobuf:"bytes,2,opt,name=createRequest,proto3,oneof"`
}

type WriteTransactionRequest_VerifyRequest struct {
	VerifyRequest *VerifyRequest `protobuf:"bytes,8,opt,name=verifyRequest,proto3,oneof"`
}

type WriteTransactionRequest_SaveRequest struct {
	SaveRequest *SaveRequest `protobuf:"bytes,3,opt,name=saveRequest,proto3,oneof"`
}

type WriteTransactionRequest_DeleteRequest struct {
	DeleteRequest *DeleteRequest `protobuf:"bytes,4,opt,name=deleteRequest,proto3,oneof"`
}

type WriteTransactionRequest_HasRequest struct {
	HasRequest *HasRequest `protobuf:"bytes,5,opt,name=hasRequest,proto3,oneof"`
}

type WriteTransactionRequest_FindRequest struct {
	FindRequest *FindRequest `protobuf:"bytes,6,opt,name=findRequest,proto3,oneof"`
}

type WriteTransactionRequest_FindByIDRequest struct {
	FindByIDRequest *FindByIDRequest `protobuf:"bytes,7,opt,name=findByIDRequest,proto3,oneof"`
}

type WriteTransactionRequest_DiscardRequest struct {
	DiscardRequest *DiscardRequest `protobuf:"bytes,9,opt,name=discardRequest,proto3,oneof"`
}

func (*WriteTransactionRequest_StartTransactionRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_CreateRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_VerifyRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_SaveRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_DeleteRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_HasRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_FindRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_FindByIDRequest) isWriteTransactionRequest_Option() {}

func (*WriteTransactionRequest_DiscardRequest) isWriteTransactionRequest_Option() {}

type WriteTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Option:
	//	*WriteTransactionReply_CreateReply
	//	*WriteTransactionReply_VerifyReply
	//	*WriteTransactionReply_SaveReply
	//	*WriteTransactionReply_DeleteReply
	//	*WriteTransactionReply_HasReply
	//	*WriteTransactionReply_FindReply
	//	*WriteTransactionReply_FindByIDReply
	//	*WriteTransactionReply_DiscardReply
	Option isWriteTransactionReply_Option `protobuf_oneof:"option"`
}

func (x *WriteTransactionReply) Reset() {
	*x = WriteTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteTransactionReply) ProtoMessage() {}

func (x *WriteTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteTransactionReply.ProtoReflect.Descriptor instead.
func (*WriteTransactionReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{43}
}

func (m *WriteTransactionReply) GetOption() isWriteTransactionReply_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

func (x *WriteTransactionReply) GetCreateReply() *CreateReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_CreateReply); ok {
		return x.CreateReply
	}
	return nil
}

func (x *WriteTransactionReply) GetVerifyReply() *VerifyReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_VerifyReply); ok {
		return x.VerifyReply
	}
	return nil
}

func (x *WriteTransactionReply) GetSaveReply() *SaveReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_SaveReply); ok {
		return x.SaveReply
	}
	return nil
}

func (x *WriteTransactionReply) GetDeleteReply() *DeleteReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_DeleteReply); ok {
		return x.DeleteReply
	}
	return nil
}

func (x *WriteTransactionReply) GetHasReply() *HasReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_HasReply); ok {
		return x.HasReply
	}
	return nil
}

func (x *WriteTransactionReply) GetFindReply() *FindReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_FindReply); ok {
		return x.FindReply
	}
	return nil
}

func (x *WriteTransactionReply) GetFindByIDReply() *FindByIDReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_FindByIDReply); ok {
		return x.FindByIDReply
	}
	return nil
}

func (x *WriteTransactionReply) GetDiscardReply() *DiscardReply {
	if x, ok := x.GetOption().(*WriteTransactionReply_DiscardReply); ok {
		return x.DiscardReply
	}
	return nil
}

type isWriteTransactionReply_Option interface {
	isWriteTransactionReply_Option()
}

type WriteTransactionReply_CreateReply struct {
	CreateReply *CreateReply `protobuf:"bytes,1,opt,name=createReply,proto3,oneof"`
}

type WriteTransactionReply_VerifyReply struct {
	VerifyReply *VerifyReply `protobuf:"bytes,7,opt,name=verifyReply,proto3,oneof"`
}

type WriteTransactionReply_SaveReply struct {
	SaveReply *SaveReply `protobuf:"bytes,2,opt,name=saveReply,proto3,oneof"`
}

type WriteTransactionReply_DeleteReply struct {
	DeleteReply *DeleteReply `protobuf:"bytes,3,opt,name=deleteReply,proto3,oneof"`
}

type WriteTransactionReply_HasReply struct {
	HasReply *HasReply `protobuf:"bytes,4,opt,name=hasReply,proto3,oneof"`
}

type WriteTransactionReply_FindReply struct {
	FindReply *FindReply `protobuf:"bytes,5,opt,name=findReply,proto3,oneof"`
}

type WriteTransactionReply_FindByIDReply struct {
	FindByIDReply *FindByIDReply `protobuf:"bytes,6,opt,name=findByIDReply,proto3,oneof"`
}

type WriteTransactionReply_DiscardReply struct {
	DiscardReply *DiscardReply `protobuf:"bytes,8,opt,name=discardReply,proto3,oneof"`
}

func (*WriteTransactionReply_CreateReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_VerifyReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_SaveReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_DeleteReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_HasReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_FindReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_FindByIDReply) isWriteTransactionReply_Option() {}

func (*WriteTransactionReply_DiscardReply) isWriteTransactionReply_Option() {}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID    []byte                  `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Filters []*ListenRequest_Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{44}
}

func (x *ListenRequest) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *ListenRequest) GetFilters() []*ListenRequest_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string             `protobuf:"bytes,1,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	InstanceID     string             `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Action         ListenReply_Action `protobuf:"varint,3,opt,name=action,proto3,enum=api.pb.ListenReply_Action" json:"action,omitempty"`
	Instance       []byte             `protobuf:"bytes,4,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *ListenReply) Reset() {
	*x = ListenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenReply) ProtoMessage() {}

func (x *ListenReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenReply.ProtoReflect.Descriptor instead.
func (*ListenReply) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{45}
}

func (x *ListenReply) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ListenReply) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *ListenReply) GetAction() ListenReply_Action {
	if x != nil {
		return x.Action
	}
	return ListenReply_CREATE
}

func (x *ListenReply) GetInstance() []byte {
	if x != nil {
		return x.Instance
	}
	return nil
}

type ListDBsReply_DB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbID []byte          `protobuf:"bytes,1,opt,name=dbID,proto3" json:"dbID,omitempty"`
	Info *GetDBInfoReply `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *ListDBsReply_DB) Reset() {
	*x = ListDBsReply_DB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDBsReply_DB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDBsReply_DB) ProtoMessage() {}

func (x *ListDBsReply_DB) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDBsReply_DB.ProtoReflect.Descriptor instead.
func (*ListDBsReply_DB) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListDBsReply_DB) GetDbID() []byte {
	if x != nil {
		return x.DbID
	}
	return nil
}

func (x *ListDBsReply_DB) GetInfo() *GetDBInfoReply {
	if x != nil {
		return x.Info
	}
	return nil
}

type ListenRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string                      `protobuf:"bytes,1,opt,name=collectionName,proto3" json:"collectionName,omitempty"`
	InstanceID     string                      `protobuf:"bytes,2,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Action         ListenRequest_Filter_Action `protobuf:"varint,3,opt,name=action,proto3,enum=api.pb.ListenRequest_Filter_Action" json:"action,omitempty"`
}

func (x *ListenRequest_Filter) Reset() {
	*x = ListenRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pb_threaddb_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest_Filter) ProtoMessage() {}

func (x *ListenRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_api_pb_threaddb_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListenRequest_Filter) Descriptor() ([]byte, []int) {
	return file_api_pb_threaddb_proto_rawDescGZIP(), []int{44, 0}
}

func (x *ListenRequest_Filter) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *ListenRequest_Filter) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *ListenRequest_Filter) GetAction() ListenRequest_Filter_Action {
	if x != nil {
		return x.Action
	}
	return ListenRequest_Filter_ALL
}

var File_api_pb_threaddb_proto protoreflect.FileDescriptor

var file_api_pb_threaddb_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x22,
	0xb6, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77,
	0x44, 0x42, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x4b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x22, 0x0c,
	0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7f,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x29,
	0x0a, 0x03, 0x64, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x42, 0x52, 0x03, 0x64, 0x62, 0x73, 0x1a, 0x44, 0x0a, 0x02, 0x44, 0x42, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x62, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x42,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x42, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x42,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x22, 0x0f, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5c, 0x0a,
	0x14, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x14, 0x0a, 0x12, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x5f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x22, 0x58,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x69, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22,
	0x37, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x6a, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x73, 0x22, 0x4e,
	0x0a, 0x08, 0x48, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x67,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x4a, 0x53, 0x4f, 0x4e, 0x22, 0x55, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x6d,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0x57, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x55, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xb3, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31,
	0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xec, 0x04, 0x0a, 0x17, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0b,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2e, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x08, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x02, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x62, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x56, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xd1, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x32, 0xae, 0x0b, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x44, 0x42, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x65, 0x77, 0x44, 0x42, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77,
	0x44, 0x42, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x42, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x42, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x42, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x42, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x42,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x42, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x42, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x42, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x42, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x51, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a,
	0x04, 0x53, 0x61, 0x76, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x03, 0x48, 0x61, 0x73, 0x12, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x61, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x69, 0x6c, 0x65, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_pb_threaddb_proto_rawDescOnce sync.Once
	file_api_pb_threaddb_proto_rawDescData = file_api_pb_threaddb_proto_rawDesc
)

func file_api_pb_threaddb_proto_rawDescGZIP() []byte {
	file_api_pb_threaddb_proto_rawDescOnce.Do(func() {
		file_api_pb_threaddb_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_pb_threaddb_proto_rawDescData)
	})
	return file_api_pb_threaddb_proto_rawDescData
}

var file_api_pb_threaddb_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_pb_threaddb_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_api_pb_threaddb_proto_goTypes = []interface{}{
	(ListenRequest_Filter_Action)(0),    // 0: api.pb.ListenRequest.Filter.Action
	(ListenReply_Action)(0),             // 1: api.pb.ListenReply.Action
	(*NewDBRequest)(nil),                // 2: api.pb.NewDBRequest
	(*NewDBFromAddrRequest)(nil),        // 3: api.pb.NewDBFromAddrRequest
	(*CollectionConfig)(nil),            // 4: api.pb.CollectionConfig
	(*Index)(nil),                       // 5: api.pb.Index
	(*NewDBReply)(nil),                  // 6: api.pb.NewDBReply
	(*ListDBsRequest)(nil),              // 7: api.pb.ListDBsRequest
	(*ListDBsReply)(nil),                // 8: api.pb.ListDBsReply
	(*GetDBInfoRequest)(nil),            // 9: api.pb.GetDBInfoRequest
	(*GetDBInfoReply)(nil),              // 10: api.pb.GetDBInfoReply
	(*DeleteDBRequest)(nil),             // 11: api.pb.DeleteDBRequest
	(*DeleteDBReply)(nil),               // 12: api.pb.DeleteDBReply
	(*NewCollectionRequest)(nil),        // 13: api.pb.NewCollectionRequest
	(*NewCollectionReply)(nil),          // 14: api.pb.NewCollectionReply
	(*UpdateCollectionRequest)(nil),     // 15: api.pb.UpdateCollectionRequest
	(*UpdateCollectionReply)(nil),       // 16: api.pb.UpdateCollectionReply
	(*DeleteCollectionRequest)(nil),     // 17: api.pb.DeleteCollectionRequest
	(*DeleteCollectionReply)(nil),       // 18: api.pb.DeleteCollectionReply
	(*GetCollectionInfoRequest)(nil),    // 19: api.pb.GetCollectionInfoRequest
	(*GetCollectionInfoReply)(nil),      // 20: api.pb.GetCollectionInfoReply
	(*GetCollectionIndexesRequest)(nil), // 21: api.pb.GetCollectionIndexesRequest
	(*GetCollectionIndexesReply)(nil),   // 22: api.pb.GetCollectionIndexesReply
	(*ListCollectionsRequest)(nil),      // 23: api.pb.ListCollectionsRequest
	(*ListCollectionsReply)(nil),        // 24: api.pb.ListCollectionsReply
	(*CreateRequest)(nil),               // 25: api.pb.CreateRequest
	(*CreateReply)(nil),                 // 26: api.pb.CreateReply
	(*VerifyRequest)(nil),               // 27: api.pb.VerifyRequest
	(*VerifyReply)(nil),                 // 28: api.pb.VerifyReply
	(*SaveRequest)(nil),                 // 29: api.pb.SaveRequest
	(*SaveReply)(nil),                   // 30: api.pb.SaveReply
	(*DeleteRequest)(nil),               // 31: api.pb.DeleteRequest
	(*DeleteReply)(nil),                 // 32: api.pb.DeleteReply
	(*HasRequest)(nil),                  // 33: api.pb.HasRequest
	(*HasReply)(nil),                    // 34: api.pb.HasReply
	(*FindRequest)(nil),                 // 35: api.pb.FindRequest
	(*FindReply)(nil),                   // 36: api.pb.FindReply
	(*FindByIDRequest)(nil),             // 37: api.pb.FindByIDRequest
	(*FindByIDReply)(nil),               // 38: api.pb.FindByIDReply
	(*DiscardRequest)(nil),              // 39: api.pb.DiscardRequest
	(*DiscardReply)(nil),                // 40: api.pb.DiscardReply
	(*StartTransactionRequest)(nil),     // 41: api.pb.StartTransactionRequest
	(*ReadTransactionRequest)(nil),      // 42: api.pb.ReadTransactionRequest
	(*ReadTransactionReply)(nil),        // 43: api.pb.ReadTransactionReply
	(*WriteTransactionRequest)(nil),     // 44: api.pb.WriteTransactionRequest
	(*WriteTransactionReply)(nil),       // 45: api.pb.WriteTransactionReply
	(*ListenRequest)(nil),               // 46: api.pb.ListenRequest
	(*ListenReply)(nil),                 // 47: api.pb.ListenReply
	(*ListDBsReply_DB)(nil),             // 48: api.pb.ListDBsReply.DB
	(*ListenRequest_Filter)(nil),        // 49: api.pb.ListenRequest.Filter
}
var file_api_pb_threaddb_proto_depIdxs = []int32{
	4,  // 0: api.pb.NewDBRequest.collections:type_name -> api.pb.CollectionConfig
	4,  // 1: api.pb.NewDBFromAddrRequest.collections:type_name -> api.pb.CollectionConfig
	5,  // 2: api.pb.CollectionConfig.indexes:type_name -> api.pb.Index
	48, // 3: api.pb.ListDBsReply.dbs:type_name -> api.pb.ListDBsReply.DB
	4,  // 4: api.pb.NewCollectionRequest.config:type_name -> api.pb.CollectionConfig
	4,  // 5: api.pb.UpdateCollectionRequest.config:type_name -> api.pb.CollectionConfig
	5,  // 6: api.pb.GetCollectionInfoReply.indexes:type_name -> api.pb.Index
	5,  // 7: api.pb.GetCollectionIndexesReply.indexes:type_name -> api.pb.Index
	20, // 8: api.pb.ListCollectionsReply.collections:type_name -> api.pb.GetCollectionInfoReply
	41, // 9: api.pb.ReadTransactionRequest.startTransactionRequest:type_name -> api.pb.StartTransactionRequest
	33, // 10: api.pb.ReadTransactionRequest.hasRequest:type_name -> api.pb.HasRequest
	35, // 11: api.pb.ReadTransactionRequest.findRequest:type_name -> api.pb.FindRequest
	37, // 12: api.pb.ReadTransactionRequest.findByIDRequest:type_name -> api.pb.FindByIDRequest
	34, // 13: api.pb.ReadTransactionReply.hasReply:type_name -> api.pb.HasReply
	36, // 14: api.pb.ReadTransactionReply.findReply:type_name -> api.pb.FindReply
	38, // 15: api.pb.ReadTransactionReply.findByIDReply:type_name -> api.pb.FindByIDReply
	41, // 16: api.pb.WriteTransactionRequest.startTransactionRequest:type_name -> api.pb.StartTransactionRequest
	25, // 17: api.pb.WriteTransactionRequest.createRequest:type_name -> api.pb.CreateRequest
	27, // 18: api.pb.WriteTransactionRequest.verifyRequest:type_name -> api.pb.VerifyRequest
	29, // 19: api.pb.WriteTransactionRequest.saveRequest:type_name -> api.pb.SaveRequest
	31, // 20: api.pb.WriteTransactionRequest.deleteRequest:type_name -> api.pb.DeleteRequest
	33, // 21: api.pb.WriteTransactionRequest.hasRequest:type_name -> api.pb.HasRequest
	35, // 22: api.pb.WriteTransactionRequest.findRequest:type_name -> api.pb.FindRequest
	37, // 23: api.pb.WriteTransactionRequest.findByIDRequest:type_name -> api.pb.FindByIDRequest
	39, // 24: api.pb.WriteTransactionRequest.discardRequest:type_name -> api.pb.DiscardRequest
	26, // 25: api.pb.WriteTransactionReply.createReply:type_name -> api.pb.CreateReply
	28, // 26: api.pb.WriteTransactionReply.verifyReply:type_name -> api.pb.VerifyReply
	30, // 27: api.pb.WriteTransactionReply.saveReply:type_name -> api.pb.SaveReply
	32, // 28: api.pb.WriteTransactionReply.deleteReply:type_name -> api.pb.DeleteReply
	34, // 29: api.pb.WriteTransactionReply.hasReply:type_name -> api.pb.HasReply
	36, // 30: api.pb.WriteTransactionReply.findReply:type_name -> api.pb.FindReply
	38, // 31: api.pb.WriteTransactionReply.findByIDReply:type_name -> api.pb.FindByIDReply
	40, // 32: api.pb.WriteTransactionReply.discardReply:type_name -> api.pb.DiscardReply
	49, // 33: api.pb.ListenRequest.filters:type_name -> api.pb.ListenRequest.Filter
	1,  // 34: api.pb.ListenReply.action:type_name -> api.pb.ListenReply.Action
	10, // 35: api.pb.ListDBsReply.DB.info:type_name -> api.pb.GetDBInfoReply
	0,  // 36: api.pb.ListenRequest.Filter.action:type_name -> api.pb.ListenRequest.Filter.Action
	2,  // 37: api.pb.APIService.NewDB:input_type -> api.pb.NewDBRequest
	3,  // 38: api.pb.APIService.NewDBFromAddr:input_type -> api.pb.NewDBFromAddrRequest
	7,  // 39: api.pb.APIService.ListDBs:input_type -> api.pb.ListDBsRequest
	9,  // 40: api.pb.APIService.GetDBInfo:input_type -> api.pb.GetDBInfoRequest
	11, // 41: api.pb.APIService.DeleteDB:input_type -> api.pb.DeleteDBRequest
	13, // 42: api.pb.APIService.NewCollection:input_type -> api.pb.NewCollectionRequest
	15, // 43: api.pb.APIService.UpdateCollection:input_type -> api.pb.UpdateCollectionRequest
	17, // 44: api.pb.APIService.DeleteCollection:input_type -> api.pb.DeleteCollectionRequest
	19, // 45: api.pb.APIService.GetCollectionInfo:input_type -> api.pb.GetCollectionInfoRequest
	21, // 46: api.pb.APIService.GetCollectionIndexes:input_type -> api.pb.GetCollectionIndexesRequest
	23, // 47: api.pb.APIService.ListCollections:input_type -> api.pb.ListCollectionsRequest
	25, // 48: api.pb.APIService.Create:input_type -> api.pb.CreateRequest
	27, // 49: api.pb.APIService.Verify:input_type -> api.pb.VerifyRequest
	29, // 50: api.pb.APIService.Save:input_type -> api.pb.SaveRequest
	31, // 51: api.pb.APIService.Delete:input_type -> api.pb.DeleteRequest
	33, // 52: api.pb.APIService.Has:input_type -> api.pb.HasRequest
	35, // 53: api.pb.APIService.Find:input_type -> api.pb.FindRequest
	37, // 54: api.pb.APIService.FindByID:input_type -> api.pb.FindByIDRequest
	42, // 55: api.pb.APIService.ReadTransaction:input_type -> api.pb.ReadTransactionRequest
	44, // 56: api.pb.APIService.WriteTransaction:input_type -> api.pb.WriteTransactionRequest
	46, // 57: api.pb.APIService.Listen:input_type -> api.pb.ListenRequest
	6,  // 58: api.pb.APIService.NewDB:output_type -> api.pb.NewDBReply
	6,  // 59: api.pb.APIService.NewDBFromAddr:output_type -> api.pb.NewDBReply
	8,  // 60: api.pb.APIService.ListDBs:output_type -> api.pb.ListDBsReply
	10, // 61: api.pb.APIService.GetDBInfo:output_type -> api.pb.GetDBInfoReply
	12, // 62: api.pb.APIService.DeleteDB:output_type -> api.pb.DeleteDBReply
	14, // 63: api.pb.APIService.NewCollection:output_type -> api.pb.NewCollectionReply
	16, // 64: api.pb.APIService.UpdateCollection:output_type -> api.pb.UpdateCollectionReply
	18, // 65: api.pb.APIService.DeleteCollection:output_type -> api.pb.DeleteCollectionReply
	20, // 66: api.pb.APIService.GetCollectionInfo:output_type -> api.pb.GetCollectionInfoReply
	22, // 67: api.pb.APIService.GetCollectionIndexes:output_type -> api.pb.GetCollectionIndexesReply
	24, // 68: api.pb.APIService.ListCollections:output_type -> api.pb.ListCollectionsReply
	26, // 69: api.pb.APIService.Create:output_type -> api.pb.CreateReply
	28, // 70: api.pb.APIService.Verify:output_type -> api.pb.VerifyReply
	30, // 71: api.pb.APIService.Save:output_type -> api.pb.SaveReply
	32, // 72: api.pb.APIService.Delete:output_type -> api.pb.DeleteReply
	34, // 73: api.pb.APIService.Has:output_type -> api.pb.HasReply
	36, // 74: api.pb.APIService.Find:output_type -> api.pb.FindReply
	38, // 75: api.pb.APIService.FindByID:output_type -> api.pb.FindByIDReply
	43, // 76: api.pb.APIService.ReadTransaction:output_type -> api.pb.ReadTransactionReply
	45, // 77: api.pb.APIService.WriteTransaction:output_type -> api.pb.WriteTransactionReply
	47, // 78: api.pb.APIService.Listen:output_type -> api.pb.ListenReply
	58, // [58:79] is the sub-list for method output_type
	37, // [37:58] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_api_pb_threaddb_proto_init() }
func file_api_pb_threaddb_proto_init() {
	if File_api_pb_threaddb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_pb_threaddb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDBFromAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewDBReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDBsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDBsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDBInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDBInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDBRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDBReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCollectionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionIndexesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionIndexesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCollectionsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByIDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDBsReply_DB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pb_threaddb_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_pb_threaddb_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ReadTransactionRequest_StartTransactionRequest)(nil),
		(*ReadTransactionRequest_HasRequest)(nil),
		(*ReadTransactionRequest_FindRequest)(nil),
		(*ReadTransactionRequest_FindByIDRequest)(nil),
	}
	file_api_pb_threaddb_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*ReadTransactionReply_HasReply)(nil),
		(*ReadTransactionReply_FindReply)(nil),
		(*ReadTransactionReply_FindByIDReply)(nil),
	}
	file_api_pb_threaddb_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*WriteTransactionRequest_StartTransactionRequest)(nil),
		(*WriteTransactionRequest_CreateRequest)(nil),
		(*WriteTransactionRequest_VerifyRequest)(nil),
		(*WriteTransactionRequest_SaveRequest)(nil),
		(*WriteTransactionRequest_DeleteRequest)(nil),
		(*WriteTransactionRequest_HasRequest)(nil),
		(*WriteTransactionRequest_FindRequest)(nil),
		(*WriteTransactionRequest_FindByIDRequest)(nil),
		(*WriteTransactionRequest_DiscardRequest)(nil),
	}
	file_api_pb_threaddb_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*WriteTransactionReply_CreateReply)(nil),
		(*WriteTransactionReply_VerifyReply)(nil),
		(*WriteTransactionReply_SaveReply)(nil),
		(*WriteTransactionReply_DeleteReply)(nil),
		(*WriteTransactionReply_HasReply)(nil),
		(*WriteTransactionReply_FindReply)(nil),
		(*WriteTransactionReply_FindByIDReply)(nil),
		(*WriteTransactionReply_DiscardReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_pb_threaddb_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_pb_threaddb_proto_goTypes,
		DependencyIndexes: file_api_pb_threaddb_proto_depIdxs,
		EnumInfos:         file_api_pb_threaddb_proto_enumTypes,
		MessageInfos:      file_api_pb_threaddb_proto_msgTypes,
	}.Build()
	File_api_pb_threaddb_proto = out.File
	file_api_pb_threaddb_proto_rawDesc = nil
	file_api_pb_threaddb_proto_goTypes = nil
	file_api_pb_threaddb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// APIServiceClient is the client API for APIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIServiceClient interface {
	NewDB(ctx context.Context, in *NewDBRequest, opts ...grpc.CallOption) (*NewDBReply, error)
	NewDBFromAddr(ctx context.Context, in *NewDBFromAddrRequest, opts ...grpc.CallOption) (*NewDBReply, error)
	ListDBs(ctx context.Context, in *ListDBsRequest, opts ...grpc.CallOption) (*ListDBsReply, error)
	GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoReply, error)
	DeleteDB(ctx context.Context, in *DeleteDBRequest, opts ...grpc.CallOption) (*DeleteDBReply, error)
	NewCollection(ctx context.Context, in *NewCollectionRequest, opts ...grpc.CallOption) (*NewCollectionReply, error)
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionReply, error)
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionReply, error)
	GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoReply, error)
	// Deprecated: Do not use.
	GetCollectionIndexes(ctx context.Context, in *GetCollectionIndexesRequest, opts ...grpc.CallOption) (*GetCollectionIndexesReply, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsReply, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error)
	Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindReply, error)
	FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDReply, error)
	ReadTransaction(ctx context.Context, opts ...grpc.CallOption) (APIService_ReadTransactionClient, error)
	WriteTransaction(ctx context.Context, opts ...grpc.CallOption) (APIService_WriteTransactionClient, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (APIService_ListenClient, error)
}

type aPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIServiceClient(cc grpc.ClientConnInterface) APIServiceClient {
	return &aPIServiceClient{cc}
}

func (c *aPIServiceClient) NewDB(ctx context.Context, in *NewDBRequest, opts ...grpc.CallOption) (*NewDBReply, error) {
	out := new(NewDBReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/NewDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) NewDBFromAddr(ctx context.Context, in *NewDBFromAddrRequest, opts ...grpc.CallOption) (*NewDBReply, error) {
	out := new(NewDBReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/NewDBFromAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ListDBs(ctx context.Context, in *ListDBsRequest, opts ...grpc.CallOption) (*ListDBsReply, error) {
	out := new(ListDBsReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/ListDBs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetDBInfo(ctx context.Context, in *GetDBInfoRequest, opts ...grpc.CallOption) (*GetDBInfoReply, error) {
	out := new(GetDBInfoReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/GetDBInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteDB(ctx context.Context, in *DeleteDBRequest, opts ...grpc.CallOption) (*DeleteDBReply, error) {
	out := new(DeleteDBReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/DeleteDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) NewCollection(ctx context.Context, in *NewCollectionRequest, opts ...grpc.CallOption) (*NewCollectionReply, error) {
	out := new(NewCollectionReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/NewCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionReply, error) {
	out := new(UpdateCollectionReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionReply, error) {
	out := new(DeleteCollectionReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoReply, error) {
	out := new(GetCollectionInfoReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *aPIServiceClient) GetCollectionIndexes(ctx context.Context, in *GetCollectionIndexesRequest, opts ...grpc.CallOption) (*GetCollectionIndexesReply, error) {
	out := new(GetCollectionIndexesReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/GetCollectionIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsReply, error) {
	out := new(ListCollectionsReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyReply, error) {
	out := new(VerifyReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error) {
	out := new(SaveReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteReply, error) {
	out := new(DeleteReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Has(ctx context.Context, in *HasRequest, opts ...grpc.CallOption) (*HasReply, error) {
	out := new(HasReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindReply, error) {
	out := new(FindReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) FindByID(ctx context.Context, in *FindByIDRequest, opts ...grpc.CallOption) (*FindByIDReply, error) {
	out := new(FindByIDReply)
	err := c.cc.Invoke(ctx, "/api.pb.APIService/FindByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIServiceClient) ReadTransaction(ctx context.Context, opts ...grpc.CallOption) (APIService_ReadTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[0], "/api.pb.APIService/ReadTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceReadTransactionClient{stream}
	return x, nil
}

type APIService_ReadTransactionClient interface {
	Send(*ReadTransactionRequest) error
	Recv() (*ReadTransactionReply, error)
	grpc.ClientStream
}

type aPIServiceReadTransactionClient struct {
	grpc.ClientStream
}

func (x *aPIServiceReadTransactionClient) Send(m *ReadTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIServiceReadTransactionClient) Recv() (*ReadTransactionReply, error) {
	m := new(ReadTransactionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) WriteTransaction(ctx context.Context, opts ...grpc.CallOption) (APIService_WriteTransactionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[1], "/api.pb.APIService/WriteTransaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceWriteTransactionClient{stream}
	return x, nil
}

type APIService_WriteTransactionClient interface {
	Send(*WriteTransactionRequest) error
	Recv() (*WriteTransactionReply, error)
	grpc.ClientStream
}

type aPIServiceWriteTransactionClient struct {
	grpc.ClientStream
}

func (x *aPIServiceWriteTransactionClient) Send(m *WriteTransactionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIServiceWriteTransactionClient) Recv() (*WriteTransactionReply, error) {
	m := new(WriteTransactionReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (APIService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_APIService_serviceDesc.Streams[2], "/api.pb.APIService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIService_ListenClient interface {
	Recv() (*ListenReply, error)
	grpc.ClientStream
}

type aPIServiceListenClient struct {
	grpc.ClientStream
}

func (x *aPIServiceListenClient) Recv() (*ListenReply, error) {
	m := new(ListenReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServiceServer is the server API for APIService service.
type APIServiceServer interface {
	NewDB(context.Context, *NewDBRequest) (*NewDBReply, error)
	NewDBFromAddr(context.Context, *NewDBFromAddrRequest) (*NewDBReply, error)
	ListDBs(context.Context, *ListDBsRequest) (*ListDBsReply, error)
	GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoReply, error)
	DeleteDB(context.Context, *DeleteDBRequest) (*DeleteDBReply, error)
	NewCollection(context.Context, *NewCollectionRequest) (*NewCollectionReply, error)
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionReply, error)
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionReply, error)
	GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoReply, error)
	// Deprecated: Do not use.
	GetCollectionIndexes(context.Context, *GetCollectionIndexesRequest) (*GetCollectionIndexesReply, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsReply, error)
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	Verify(context.Context, *VerifyRequest) (*VerifyReply, error)
	Save(context.Context, *SaveRequest) (*SaveReply, error)
	Delete(context.Context, *DeleteRequest) (*DeleteReply, error)
	Has(context.Context, *HasRequest) (*HasReply, error)
	Find(context.Context, *FindRequest) (*FindReply, error)
	FindByID(context.Context, *FindByIDRequest) (*FindByIDReply, error)
	ReadTransaction(APIService_ReadTransactionServer) error
	WriteTransaction(APIService_WriteTransactionServer) error
	Listen(*ListenRequest, APIService_ListenServer) error
}

// UnimplementedAPIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServiceServer struct {
}

func (*UnimplementedAPIServiceServer) NewDB(context.Context, *NewDBRequest) (*NewDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDB not implemented")
}
func (*UnimplementedAPIServiceServer) NewDBFromAddr(context.Context, *NewDBFromAddrRequest) (*NewDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDBFromAddr not implemented")
}
func (*UnimplementedAPIServiceServer) ListDBs(context.Context, *ListDBsRequest) (*ListDBsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDBs not implemented")
}
func (*UnimplementedAPIServiceServer) GetDBInfo(context.Context, *GetDBInfoRequest) (*GetDBInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBInfo not implemented")
}
func (*UnimplementedAPIServiceServer) DeleteDB(context.Context, *DeleteDBRequest) (*DeleteDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDB not implemented")
}
func (*UnimplementedAPIServiceServer) NewCollection(context.Context, *NewCollectionRequest) (*NewCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCollection not implemented")
}
func (*UnimplementedAPIServiceServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (*UnimplementedAPIServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (*UnimplementedAPIServiceServer) GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (*UnimplementedAPIServiceServer) GetCollectionIndexes(context.Context, *GetCollectionIndexesRequest) (*GetCollectionIndexesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionIndexes not implemented")
}
func (*UnimplementedAPIServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (*UnimplementedAPIServiceServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAPIServiceServer) Verify(context.Context, *VerifyRequest) (*VerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (*UnimplementedAPIServiceServer) Save(context.Context, *SaveRequest) (*SaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (*UnimplementedAPIServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedAPIServiceServer) Has(context.Context, *HasRequest) (*HasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (*UnimplementedAPIServiceServer) Find(context.Context, *FindRequest) (*FindReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedAPIServiceServer) FindByID(context.Context, *FindByIDRequest) (*FindByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByID not implemented")
}
func (*UnimplementedAPIServiceServer) ReadTransaction(APIService_ReadTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTransaction not implemented")
}
func (*UnimplementedAPIServiceServer) WriteTransaction(APIService_WriteTransactionServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteTransaction not implemented")
}
func (*UnimplementedAPIServiceServer) Listen(*ListenRequest, APIService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterAPIServiceServer(s *grpc.Server, srv APIServiceServer) {
	s.RegisterService(&_APIService_serviceDesc, srv)
}

func _APIService_NewDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).NewDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/NewDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).NewDB(ctx, req.(*NewDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_NewDBFromAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDBFromAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).NewDBFromAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/NewDBFromAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).NewDBFromAddr(ctx, req.(*NewDBFromAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ListDBs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ListDBs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/ListDBs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ListDBs(ctx, req.(*ListDBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetDBInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetDBInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/GetDBInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetDBInfo(ctx, req.(*GetDBInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/DeleteDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteDB(ctx, req.(*DeleteDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_NewCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).NewCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/NewCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).NewCollection(ctx, req.(*NewCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetCollectionInfo(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_GetCollectionIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).GetCollectionIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/GetCollectionIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).GetCollectionIndexes(ctx, req.(*GetCollectionIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Has(ctx, req.(*HasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_FindByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServiceServer).FindByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pb.APIService/FindByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServiceServer).FindByID(ctx, req.(*FindByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIService_ReadTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServiceServer).ReadTransaction(&aPIServiceReadTransactionServer{stream})
}

type APIService_ReadTransactionServer interface {
	Send(*ReadTransactionReply) error
	Recv() (*ReadTransactionRequest, error)
	grpc.ServerStream
}

type aPIServiceReadTransactionServer struct {
	grpc.ServerStream
}

func (x *aPIServiceReadTransactionServer) Send(m *ReadTransactionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIServiceReadTransactionServer) Recv() (*ReadTransactionRequest, error) {
	m := new(ReadTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _APIService_WriteTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServiceServer).WriteTransaction(&aPIServiceWriteTransactionServer{stream})
}

type APIService_WriteTransactionServer interface {
	Send(*WriteTransactionReply) error
	Recv() (*WriteTransactionRequest, error)
	grpc.ServerStream
}

type aPIServiceWriteTransactionServer struct {
	grpc.ServerStream
}

func (x *aPIServiceWriteTransactionServer) Send(m *WriteTransactionReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIServiceWriteTransactionServer) Recv() (*WriteTransactionRequest, error) {
	m := new(WriteTransactionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _APIService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServiceServer).Listen(m, &aPIServiceListenServer{stream})
}

type APIService_ListenServer interface {
	Send(*ListenReply) error
	grpc.ServerStream
}

type aPIServiceListenServer struct {
	grpc.ServerStream
}

func (x *aPIServiceListenServer) Send(m *ListenReply) error {
	return x.ServerStream.SendMsg(m)
}

var _APIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.pb.APIService",
	HandlerType: (*APIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDB",
			Handler:    _APIService_NewDB_Handler,
		},
		{
			MethodName: "NewDBFromAddr",
			Handler:    _APIService_NewDBFromAddr_Handler,
		},
		{
			MethodName: "ListDBs",
			Handler:    _APIService_ListDBs_Handler,
		},
		{
			MethodName: "GetDBInfo",
			Handler:    _APIService_GetDBInfo_Handler,
		},
		{
			MethodName: "DeleteDB",
			Handler:    _APIService_DeleteDB_Handler,
		},
		{
			MethodName: "NewCollection",
			Handler:    _APIService_NewCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _APIService_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _APIService_DeleteCollection_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _APIService_GetCollectionInfo_Handler,
		},
		{
			MethodName: "GetCollectionIndexes",
			Handler:    _APIService_GetCollectionIndexes_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _APIService_ListCollections_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _APIService_Create_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _APIService_Verify_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _APIService_Save_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _APIService_Delete_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _APIService_Has_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _APIService_Find_Handler,
		},
		{
			MethodName: "FindByID",
			Handler:    _APIService_FindByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadTransaction",
			Handler:       _APIService_ReadTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteTransaction",
			Handler:       _APIService_WriteTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _APIService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/pb/threaddb.proto",
}
